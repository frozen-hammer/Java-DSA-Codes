{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 public List<List<Integer>> verticalTraversal(TreeNode root) \{\
        TreeMap<Integer, List<Pair<Integer, Integer>>> map = new TreeMap<>();\
        List<List<Integer>> li = new ArrayList<>();\
        verticalOrder(map, root, 0, 0);\
             for(int key : map.keySet())\{\
            List<Pair<Integer, Integer>> temp = map.get(key);\
            temp.sort((a,b) -> a.getKey().compareTo(b.getKey())== 0? a. getValue().compareTo(b.getValue()) : a.getKey().compareTo(b.getKey()));\
            List<Integer> list = new ArrayList<>();\
            for(Pair<Integer, Integer> pair : temp)\{\
                list.add(pair.getValue());\
            \}\
            li.add(list);\
        \}\
        \
        return li;\
    \}\
    private void verticalOrder(TreeMap<Integer, List<Pair<Integer, Integer>>> map,\
        TreeNode root, int level, int distance)\{\
        if(root == null) return;\
        if(map.get(distance)==null)\{\
            map.put(distance, new ArrayList<>());\
        \}\
        map.get(distance).add(new Pair(level, root.val));\
        verticalOrder(map, root.left, level + 1, distance - 1);\
        verticalOrder(map, root.right, level + 1, distance + 1);\
    \}}